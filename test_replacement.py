#!/usr/bin/env python3
"""
üß™ Test Simple du Replacement Engine v2.0
V√©rifie que "Sa√Ød OULHADJ" ‚Üí "PERSONNE_A" fonctionne
"""

import io
from docx import Document

def test_replacement_fix():
    print("üß™ Test du Replacement Engine v2.0")
    print("=" * 50)
    
    # 1. Cr√©er un document test
    doc = Document()
    doc.add_paragraph("Ma√Ætre Sa√Ød OULHADJ repr√©sente la partie.")
    doc.add_paragraph("Le dossier est trait√© par Sa√Ød OULHADJ.")
    
    print("üìÑ Document original cr√©√©")
    for i, para in enumerate(doc.paragraphs):
        print(f"  Paragraphe {i+1}: {para.text}")
    
    # 2. Simuler le replacement avec la nouvelle m√©thode
    replacements = {
        "Sa√Ød OULHADJ": "PERSONNE_A",
        "Ma√Ætre": "TITRE_X"
    }
    
    print(f"\nüîÑ Application des remplacements: {replacements}")
    
    # 3. Appliquer la m√©thode corrig√©e
    for paragraph in doc.paragraphs:
        _replace_in_paragraph_v2(paragraph, replacements)
    
    # 4. V√©rifier le r√©sultat
    print("\n‚úÖ Document apr√®s remplacement:")
    for i, para in enumerate(doc.paragraphs):
        print(f"  Paragraphe {i+1}: {para.text}")
    
    # 5. V√©rifications
    full_text = "\n".join([p.text for p in doc.paragraphs])
    
    # Tests
    success = True
    if "Sa√Ød OULHADJ" in full_text:
        print("‚ùå ERREUR: 'Sa√Ød OULHADJ' encore pr√©sent")
        success = False
    else:
        print("‚úÖ 'Sa√Ød OULHADJ' correctement remplac√©")
    
    if "PERSONNE_A" in full_text:
        print("‚úÖ 'PERSONNE_A' pr√©sent")
    else:
        print("‚ùå ERREUR: 'PERSONNE_A' manquant")
        success = False
    
    if "TITRE_X" in full_text:
        print("‚úÖ 'TITRE_X' pr√©sent")
    else:
        print("‚ùå ERREUR: 'TITRE_X' manquant")
        success = False
    
    print(f"\nüéØ R√©sultat: {'SUCC√àS' if success else '√âCHEC'}")
    return success

def _replace_in_paragraph_v2(paragraph, replacements):
    """Version corrig√©e du replacement"""
    import re
    
    full_text = paragraph.text
    if not full_text.strip():
        return
    
    # V√©rifier si on a des remplacements √† faire
    has_replacements = False
    modified_text = full_text
    
    for original, replacement in replacements.items():
        if original.lower() in full_text.lower():
            has_replacements = True
            # Remplacement insensible √† la casse
            pattern = re.compile(re.escape(original), re.IGNORECASE)
            modified_text = pattern.sub(replacement, modified_text)
            print(f"  üîÑ '{original}' ‚Üí '{replacement}'")
    
    if not has_replacements:
        return
    
    # SOLUTION ROBUSTE : Remplacer tout le contenu du paragraphe
    # Effacer tous les runs existants
    for run in paragraph.runs:
        run.text = ""
    
    # Si on n'a plus de runs, en cr√©er un
    if not paragraph.runs:
        paragraph.add_run("")
    
    # Mettre le texte modifi√© dans le premier run
    paragraph.runs[0].text = modified_text

if __name__ == "__main__":
    test_replacement_fix()