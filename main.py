# main.py - VERSION COMPL√àTE AVEC NER FONCTIONNEL
"""
Anonymiseur de Documents Juridiques - Version Streamlit Compl√®te
Avec NER fonctionnel et r√©solution des conflits PyTorch/Streamlit
"""

# === CONFIGURATION ANTI-CONFLIT PYTORCH/STREAMLIT ===
import os
import sys
import warnings
import logging

# Configuration logging pr√©coce
logging.basicConfig(level=logging.WARNING)
logging.getLogger("transformers").setLevel(logging.ERROR)
logging.getLogger("torch").setLevel(logging.ERROR)
logging.getLogger("tensorflow").setLevel(logging.ERROR)

# Variables d'environnement critiques AVANT tous les imports
os.environ.update({
    "TOKENIZERS_PARALLELISM": "false",
    "OMP_NUM_THREADS": "1",
    "MKL_NUM_THREADS": "1", 
    "OPENBLAS_NUM_THREADS": "1",
    "VECLIB_MAXIMUM_THREADS": "1",
    "NUMEXPR_NUM_THREADS": "1",
    "KMP_DUPLICATE_LIB_OK": "TRUE",
    "PYTORCH_JIT": "0",
    "PYTORCH_JIT_USE_NNC": "0"
})

# Suppression des warnings
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)
warnings.filterwarnings("ignore", category=DeprecationWarning)
warnings.filterwarnings("ignore", message=".*torch.*")
warnings.filterwarnings("ignore", message=".*transformers.*")

# Configuration PyTorch s√©curis√©e AVANT Streamlit
def configure_pytorch_safe():
    """Configuration PyTorch thread-safe pour Streamlit"""
    try:
        import torch
        
        # Configuration threads
        try:
            torch.set_num_threads(1)
        except (RuntimeError, ValueError) as thread_error:
            # Some environments do not support modifying thread settings
            logging.warning(f"PyTorch thread configuration warning: {thread_error}")
        
        # D√©sactiver JIT et optimisations
        if hasattr(torch.jit, "set_fuser"):
            torch.jit.set_fuser("fuser0")
        torch._C._jit_set_profiling_mode(False)
        torch._C._jit_set_profiling_executor(False)
        
        # Mode √©valuation par d√©faut
        torch.set_grad_enabled(False)
        
        return True
    except (ImportError, RuntimeError, AttributeError) as e:
        # If PyTorch cannot be configured, fall back to regex-only mode
        logging.warning(f"PyTorch configuration warning: {e}")
        return False

# Appliquer la configuration PyTorch AVANT Streamlit
PYTORCH_AVAILABLE = configure_pytorch_safe()

# === IMPORTS STREAMLIT ET MODULES ===
import streamlit as st
import tempfile
import zipfile
from pathlib import Path
import json
from datetime import datetime
import time
import uuid
import asyncio
import threading
from concurrent.futures import ThreadPoolExecutor
import queue

# Configuration Streamlit optimis√©e
st.set_page_config(
    page_title="Anonymiseur de Documents Juridiques",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': None,
        'Report a bug': None,
        'About': "Anonymiseur de Documents Juridiques v2.0"
    }
)

# Imports des modules projet
try:
    from src.anonymizer import DocumentAnonymizer
    from src.entity_manager import EntityManager
    from src.utils import (
        format_file_size,
        save_upload_file,
        cleanup_temp_files,
        generate_anonymization_stats,
        calculate_text_coverage,
    )
    from src.config import ENTITY_COLORS, SUPPORTED_FORMATS, MAX_FILE_SIZE, ANONYMIZATION_PRESETS
except ImportError as e:
    st.error(f"‚ùå Erreur d'import des modules: {e}")
    st.info("V√©rifiez que tous les fichiers sont pr√©sents dans le dossier src/")
    st.stop()

# === CSS PERSONNALIS√â AM√âLIOR√â ===
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
    }
    
    .main-header h1 {
        margin: 0;
        font-size: 2.5rem;
        font-weight: 700;
    }
    
    .main-header p {
        margin: 0.5rem 0;
        opacity: 0.9;
    }
    
    .entity-badge {
        display: inline-block;
        padding: 0.4rem 0.8rem;
        margin: 0.2rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        color: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        transition: transform 0.2s ease;
    }
    
    .entity-badge:hover {
        transform: translateY(-2px);
    }
    
    .stats-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 5px solid #667eea;
        margin: 1rem 0;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    
    .success-animation {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 2px solid #28a745;
        color: #155724;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
        animation: pulse 2s infinite;
    }
    
    @keyframes pulse {
        0% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.4); }
        70% { box-shadow: 0 0 0 10px rgba(40, 167, 69, 0); }
        100% { box-shadow: 0 0 0 0 rgba(40, 167, 69, 0); }
    }
    
    .error-message {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 2px solid #dc3545;
        color: #721c24;
        padding: 1.5rem;
        border-radius: 15px;
        margin: 1rem 0;
    }
    
    .processing-container {
        text-align: center;
        padding: 3rem;
        background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
        border-radius: 20px;
        margin: 2rem 0;
    }
    
    .processing-spinner {
        width: 60px;
        height: 60px;
        border: 6px solid #e3f2fd;
        border-top: 6px solid #2196f3;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .highlight-text {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        padding: 4px 8px;
        border-radius: 8px;
        font-weight: 600;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        border-top: 4px solid #667eea;
    }
    
    .confidence-bar {
        background: linear-gradient(90deg, #dc3545 0%, #ffc107 50%, #28a745 100%);
        height: 8px;
        border-radius: 4px;
        margin: 0.5rem 0;
    }
    
    .sidebar-info {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
    }
    
    .entity-item {
        background: white;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        transition: all 0.3s ease;
    }
    
    .entity-item:hover {
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        transform: translateY(-2px);
    }
    
    .tab-container {
        background: white;
        border-radius: 15px;
        padding: 1rem;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    }
</style>
""", unsafe_allow_html=True)

# === GESTION D'√âTAT AM√âLIOR√âE ===
def init_session_state():
    """Initialiser les variables de session avec valeurs par d√©faut"""
    defaults = {
        "entities": [],
        "groups": [],
        "document_text": "",
        "processing_mode": "ai",
        "confidence_threshold": 0.7,
        "processed_file_path": None,
        "original_file_path": None,
        "current_preset": "standard",
        "entity_manager": EntityManager(),
        "processing_stats": {},
        "anonymizer": None,
        "last_file_hash": None,
        "export_options": {
            "add_watermark": False,
            "watermark_text": "DOCUMENT ANONYMIS√â - CONFORME RGPD",
            "generate_report": False,
            "include_statistics": False
        }
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

def get_anonymizer():
    """Obtenir ou cr√©er l'anonymizer avec cache"""
    if st.session_state.anonymizer is None:
        st.session_state.anonymizer = DocumentAnonymizer(
            prefer_french=True,
            use_spacy=True
        )
    return st.session_state.anonymizer

# === INTERFACE UTILISATEUR AM√âLIOR√âE ===
def display_header():
    """En-t√™te am√©lior√© avec informations syst√®me"""
    st.markdown("""
    <div class="main-header">
        <h1>üõ°Ô∏è Anonymiseur de Documents Juridiques</h1>
        <p><strong>Intelligence Artificielle</strong> ‚Ä¢ <strong>Conforme RGPD</strong> ‚Ä¢ <strong>Haute Pr√©cision</strong></p>
        <p>Version 2.0 Professional - Traitement NER Avanc√©</p>
    </div>
    """, unsafe_allow_html=True)

def display_system_status():
    """Afficher le statut du syst√®me"""
    with st.expander("üîß Statut du Syst√®me", expanded=False):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Statut PyTorch
            if PYTORCH_AVAILABLE:
                st.success("‚úÖ PyTorch: Fonctionnel")
            else:
                st.warning("‚ö†Ô∏è PyTorch: Non disponible")
        
        with col2:
            # Statut NER
            try:
                anonymizer = get_anonymizer()
                if anonymizer.ai_anonymizer and anonymizer.ai_anonymizer.spacy_nlp:
                    st.success("‚úÖ NER (SpaCy): Actif")
                elif anonymizer.ai_anonymizer and anonymizer.ai_anonymizer.nlp_pipeline:
                    st.success("‚úÖ NER (Transformers): Actif") 
                else:
                    st.info("‚ÑπÔ∏è NER: Mode Regex uniquement")
            except:
                st.warning("‚ö†Ô∏è NER: Erreur de chargement")
        
        with col3:
            # M√©moire syst√®me
            try:
                import psutil
                memory = psutil.virtual_memory()
                memory_percent = memory.percent
                if memory_percent < 70:
                    st.success(f"‚úÖ M√©moire: {memory_percent:.1f}%")
                elif memory_percent < 85:
                    st.warning(f"‚ö†Ô∏è M√©moire: {memory_percent:.1f}%")
                else:
                    st.error(f"‚ùå M√©moire: {memory_percent:.1f}%")
            except:
                st.info("‚ÑπÔ∏è M√©moire: Non disponible")

def display_upload_section():
    """Section d'upload am√©lior√©e avec validation"""
    st.header("üìÅ Upload de Document")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # S√©lection de preset
        st.subheader("‚öôÔ∏è Configuration")
        
        preset_options = {
            "light": "üü¢ L√©ger - Donn√©es de contact uniquement",
            "standard": "üü° Standard - Donn√©es personnelles principales", 
            "complete": "üî¥ Complet - Toutes les donn√©es identifiantes",
            "gdpr_compliant": "üõ°Ô∏è RGPD - Conformit√© maximale"
        }
        
        selected_preset = st.selectbox(
            "Preset d'anonymisation:",
            options=list(preset_options.keys()),
            format_func=lambda x: preset_options[x],
            index=1,  # Standard par d√©faut
            key="preset_selector"
        )
        st.session_state.current_preset = selected_preset
        
        # Afficher la description du preset
        if selected_preset in ANONYMIZATION_PRESETS:
            preset_info = ANONYMIZATION_PRESETS[selected_preset]
            st.info(f"üìã {preset_info['description']}")
            
            # Afficher les types d'entit√©s inclus
            types_badges = ""
            for entity_type in preset_info['entity_types']:
                color = ENTITY_COLORS.get(entity_type, "#6c757d")
                types_badges += f'<span class="entity-badge" style="background-color: {color}; font-size: 0.7rem;">{entity_type}</span>'
            st.markdown(f"**Types inclus:** {types_badges}", unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Upload de fichier
        uploaded_file = st.file_uploader(
            "Choisissez un document √† anonymiser",
            type=SUPPORTED_FORMATS,
            help=f"Formats support√©s: {', '.join(SUPPORTED_FORMATS).upper()}. Taille max: {MAX_FILE_SIZE // (1024*1024)} MB",
            key="file_uploader"
        )
        
        if uploaded_file:
            # Validation de la taille
            if uploaded_file.size > MAX_FILE_SIZE:
                st.error(f"‚ùå Fichier trop volumineux ({format_file_size(uploaded_file.size)}). Maximum autoris√©: {format_file_size(MAX_FILE_SIZE)}")
                return None
            
            # Calcul du hash pour d√©tecter les changements
            import hashlib
            file_hash = hashlib.md5(uploaded_file.getvalue()).hexdigest()
            
            # Affichage des informations
            st.success(f"‚úÖ Fichier s√©lectionn√©: **{uploaded_file.name}**")
            
            info_col1, info_col2, info_col3 = st.columns(3)
            with info_col1:
                st.metric("Taille", format_file_size(uploaded_file.size))
            with info_col2:
                st.metric("Type", uploaded_file.type.split('/')[-1].upper())
            with info_col3:
                st.metric("Hash", file_hash[:8])
            
            # D√©tecter si c'est un nouveau fichier
            if file_hash != st.session_state.last_file_hash:
                st.session_state.last_file_hash = file_hash
                st.session_state.entities = []
                st.session_state.processed_file_path = None
                st.info("üîÑ Nouveau fichier d√©tect√© - Pr√™t pour analyse")
            
            return uploaded_file
    
    with col2:
        st.subheader("üìä Capacit√©s de D√©tection")
        
        # Affichage des capacit√©s selon le preset
        if st.session_state.current_preset in ANONYMIZATION_PRESETS:
            preset = ANONYMIZATION_PRESETS[st.session_state.current_preset]
            
            st.markdown("**üéØ Types d√©tect√©s:**")
            for entity_type in preset['entity_types']:
                color = ENTITY_COLORS.get(entity_type, "#6c757d")
                description = {
                    'EMAIL': 'üìß Adresses email',
                    'PHONE': 'üìû Num√©ros de t√©l√©phone',
                    'DATE': 'üìÖ Dates', 
                    'ADDRESS': 'üè† Adresses postales',
                    'IBAN': 'üí≥ Comptes bancaires',
                    'SIREN': 'üè¢ SIREN entreprises',
                    'SIRET': 'üè¢ SIRET √©tablissements',
                    'PERSON': 'üë§ Noms de personnes',
                    'ORG': 'üèõÔ∏è Organisations',
                    'SSN': 'üÜî Num√©ros de s√©curit√© sociale',
                    'CREDIT_CARD': 'üí≥ Cartes bancaires'
                }.get(entity_type, f'üìã {entity_type}')
                
                st.markdown(f'<span style="color: {color};">‚Ä¢ {description}</span>', unsafe_allow_html=True)
        
        st.markdown("---")
        
        st.markdown("**ü§ñ Modes d'analyse:**")
        st.markdown("‚Ä¢ **Regex**: Patterns pr√©d√©finis (rapide)")
        st.markdown("‚Ä¢ **IA**: NER + Regex (pr√©cis)")
        
        st.markdown("**‚ö° Performance:**")
        st.markdown("‚Ä¢ Regex: ~10-30 secondes")
        st.markdown("‚Ä¢ IA: ~1-3 minutes")
    
    return None

def display_processing_options():
    """Options de traitement am√©lior√©es"""
    st.header("‚öôÔ∏è Options de Traitement")
    
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        # Mode d'analyse
        mode = st.radio(
            "Mode d'analyse:",
            ["regex", "ai"],
            format_func=lambda x: "üöÄ Regex (Rapide)" if x == "regex" else "ü§ñ IA (Intelligent + Regex)",
            horizontal=True,
            key="processing_mode_radio"
        )
        st.session_state.processing_mode = mode
        
        if mode == "regex":
            st.info("üí° Mode Regex: D√©tection bas√©e sur des patterns pr√©d√©finis. Rapide et fiable pour les donn√©es structur√©es.")
        else:
            st.info("üß† Mode IA: Combine NER (reconnaissance d'entit√©s nomm√©es) et patterns regex pour une d√©tection maximale.")
    
    with col2:
        if mode == "ai":
            # Seuil de confiance
            confidence = st.slider(
                "Seuil de confiance IA:",
                min_value=0.1,
                max_value=1.0,
                value=st.session_state.confidence_threshold,
                step=0.05,
                help="Plus le seuil est √©lev√©, plus les d√©tections sont pr√©cises mais moins nombreuses",
                key="confidence_slider"
            )
            st.session_state.confidence_threshold = confidence
            
            # Indicateur visuel du seuil
            if confidence >= 0.8:
                st.success(f"üéØ Seuil √©lev√© ({confidence:.0%}) - Haute pr√©cision")
            elif confidence >= 0.6:
                st.warning(f"‚öñÔ∏è Seuil mod√©r√© ({confidence:.0%}) - √âquilibre pr√©cision/rappel")
            else:
                st.error(f"üîç Seuil bas ({confidence:.0%}) - D√©tection maximale")
        else:
            st.info("üîß Mode Regex: Seuil de confiance fixe √† 100%")
    
    with col3:
        # Options avanc√©es
        with st.expander("üîß Avanc√©"):
            st.checkbox("Mode debug", key="debug_mode", help="Affiche des informations de d√©bogage")
            st.checkbox("Cache r√©sultats", value=True, key="cache_results", help="Met en cache les r√©sultats pour les gros documents")

@st.cache_data(ttl=3600, show_spinner=False)
def process_document_cached(file_content, filename, mode, confidence, preset):
    """Traitement de document avec cache"""
    return process_document_core(file_content, filename, mode, confidence, preset)

def process_document_core(file_content, filename, mode, confidence, preset):
    """Logique de traitement core"""
    # Sauvegarder le fichier temporaire
    temp_path = None
    try:
        import tempfile
        import os

        # Supprimer l'ancien fichier original s'il existe
        old_path = st.session_state.get("original_file_path")
        if old_path and os.path.exists(old_path):
            try:
                os.unlink(old_path)
            except OSError:
                pass

        # Cr√©er un fichier temporaire
        with tempfile.NamedTemporaryFile(delete=False, suffix=Path(filename).suffix) as tmp:
            tmp.write(file_content)
            temp_path = tmp.name

        # Conserver le chemin pour l'export ult√©rieur
        st.session_state["original_file_path"] = temp_path

        # Obtenir l'anonymizer
        anonymizer = get_anonymizer()

        # Traitement avec gestion d'erreurs robuste
        result = anonymizer.process_document(temp_path, mode, confidence, audit=False)

        return result

    except (OSError, ValueError, RuntimeError) as e:
        # Return structured error for file processing issues
        if temp_path and os.path.exists(temp_path):
            try:
                os.unlink(temp_path)
            except OSError:
                pass
        st.session_state["original_file_path"] = None
        return {
            "status": "error",
            "error": f"Erreur lors du traitement: {str(e)}"
        }

def process_document_with_progress(uploaded_file):
    """Traiter le document avec barre de progression avanc√©e"""
    try:
        # Configuration selon le preset
        preset = ANONYMIZATION_PRESETS.get(st.session_state.current_preset, ANONYMIZATION_PRESETS["standard"])
        
        # Interface de progression
        progress_container = st.empty()
        progress_container.markdown("""
        <div class="processing-container">
            <div class="processing-spinner"></div>
            <h3>üîÑ Traitement en cours...</h3>
            <p>Initialisation du syst√®me...</p>
        </div>
        """, unsafe_allow_html=True)
        
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # √âtapes de traitement
        steps = [
            ("üîß Initialisation", 10),
            ("üìñ Lecture du document", 25),
            ("üßπ Pr√©paration du texte", 35),
            (f"üîç Analyse {st.session_state.processing_mode.upper()}", 70),
            ("‚ö° Finalisation", 90),
            ("‚úÖ Termin√©", 100)
        ]
        
        for i, (step_name, progress) in enumerate(steps):
            status_text.text(step_name)
            progress_bar.progress(progress)
            
            if i == 3:  # √âtape d'analyse
                # Traitement r√©el pendant cette √©tape
                if st.session_state.get("cache_results", True):
                    result = process_document_cached(
                        uploaded_file.getvalue(),
                        uploaded_file.name,
                        st.session_state.processing_mode,
                        st.session_state.confidence_threshold,
                        st.session_state.current_preset
                    )
                else:
                    result = process_document_core(
                        uploaded_file.getvalue(),
                        uploaded_file.name,
                        st.session_state.processing_mode,
                        st.session_state.confidence_threshold,
                        st.session_state.current_preset
                    )
            
            time.sleep(0.3)  # Animation fluide
        
        # Nettoyer l'interface de progression
        progress_container.empty()
        progress_bar.empty()
        status_text.empty()
        
        # Traiter le r√©sultat
        if result["status"] == "success":
            # Filtrer les entit√©s selon le preset
            filtered_entities = []
            for entity in result["entities"]:
                if entity["type"] in preset["entity_types"]:
                    filtered_entities.append(entity)
            
            # Mettre √† jour l'√©tat
            st.session_state.entities = filtered_entities
            st.session_state.document_text = result["text"]
            st.session_state.processed_file_path = result.get("anonymized_path")
            st.session_state.processing_stats = result.get("metadata", {})
            
            # Ajouter les entit√©s au gestionnaire
            st.session_state.entity_manager = EntityManager()
            for entity in filtered_entities:
                st.session_state.entity_manager.add_entity(entity)
            
            return True
        else:
            st.error(f"‚ùå Erreur lors du traitement: {result.get('error', 'Erreur inconnue')}")
            return False
            
    except (OSError, ValueError, RuntimeError) as e:
        # Surface processing errors to the user
        st.error(f"‚ùå Erreur lors du traitement: {str(e)}")
        if st.session_state.get("debug_mode", False):
            st.exception(e)
        return False

def display_results_advanced():
    """Affichage avanc√© des r√©sultats"""
    if not st.session_state.entities:
        st.info("Aucun document trait√©. Uploadez et analysez un document d'abord.")
        return
    
    st.header("üìä R√©sultats de l'Analyse")
    
    # Statistiques g√©n√©rales
    entities = st.session_state.entities
    stats = generate_anonymization_stats(entities, len(st.session_state.document_text))
    
    # M√©triques principales
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "Total Entit√©s",
            stats["total_entities"],
            help="Nombre total d'entit√©s d√©tect√©es"
        )
    
    with col2:
        st.metric(
            "Types Diff√©rents", 
            len(stats["entity_types"]),
            help="Nombre de types d'entit√©s diff√©rents"
        )
    
    with col3:
        mode_display = st.session_state.processing_mode.upper()
        st.metric("Mode", mode_display)
    
    with col4:
        if stats["confidence_stats"]:
            avg_conf = stats["confidence_stats"]["average"]
            st.metric(
                "Confiance Moy.",
                f"{avg_conf:.0%}",
                help="Confiance moyenne des d√©tections IA"
            )
        else:
            st.metric("Confiance", "100%")
    
    with col5:
        coverage = stats["coverage_percentage"]
        st.metric(
            "Couverture",
            f"{coverage:.1f}%",
            help="Pourcentage du texte qui sera anonymis√©"
        )
    
    # Graphique de r√©partition
    if stats["entity_types"]:
        st.subheader("üìà R√©partition par Types")
        
        import plotly.express as px
        import pandas as pd
        
        # Pr√©parer les donn√©es pour le graphique
        df = pd.DataFrame([
            {"Type": entity_type, "Nombre": count, "Couleur": ENTITY_COLORS.get(entity_type, "#6c757d")}
            for entity_type, count in stats["entity_types"].items()
        ])
        
        # Graphique en barres color√©
        fig = px.bar(
            df, 
            x="Type", 
            y="Nombre",
            color="Type",
            color_discrete_map={row["Type"]: row["Couleur"] for _, row in df.iterrows()},
            title="Distribution des Entit√©s D√©tect√©es"
        )
        fig.update_layout(showlegend=False, height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # Graphique camembert
        col1, col2 = st.columns(2)
        
        with col1:
            fig_pie = px.pie(
                df, 
                values="Nombre", 
                names="Type",
                color="Type",
                color_discrete_map={row["Type"]: row["Couleur"] for _, row in df.iterrows()},
                title="R√©partition Proportionnelle"
            )
            fig_pie.update_layout(height=400)
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            # Tableau d√©taill√©
            st.subheader("üìã D√©tail par Type")
            total = sum(stats["entity_types"].values())
            
            for entity_type, count in sorted(stats["entity_types"].items(), key=lambda x: x[1], reverse=True):
                percentage = (count / total) * 100
                color = ENTITY_COLORS.get(entity_type, "#6c757d")
                
                st.markdown(f"""
                <div style="display: flex; align-items: center; margin: 0.5rem 0;">
                    <span style="width: 20px; height: 20px; background-color: {color}; border-radius: 50%; margin-right: 10px;"></span>
                    <span style="flex: 1;"><strong>{entity_type}</strong>: {count} ({percentage:.1f}%)</span>
                </div>
                """, unsafe_allow_html=True)
    
    # Statistiques de confiance (mode IA)
    if stats["confidence_stats"] and st.session_state.processing_mode == "ai":
        st.subheader("üéØ Analyse de Confiance")
        
        conf_col1, conf_col2, conf_col3 = st.columns(3)
        
        with conf_col1:
            high_conf = stats["confidence_stats"]["high_confidence_count"]
            st.metric("Haute Confiance (‚â•80%)", high_conf, help="Entit√©s tr√®s fiables")
        
        with conf_col2:
            medium_conf = stats["confidence_stats"]["medium_confidence_count"]
            st.metric("Confiance Moyenne (50-80%)", medium_conf, help="Entit√©s moyennement fiables")
        
        with conf_col3:
            low_conf = stats["confidence_stats"]["low_confidence_count"]
            st.metric("Faible Confiance (<50%)", low_conf, help="Entit√©s √† v√©rifier manuellement")
    
    # Recommandations
    if stats["recommendations"]:
        st.subheader("üí° Recommandations")
        for recommendation in stats["recommendations"]:
            if "‚ö†Ô∏è" in recommendation:
                st.warning(recommendation)
            elif "üîí" in recommendation:
                st.error(recommendation)
            elif "‚úÖ" in recommendation:
                st.success(recommendation)
            else:
                st.info(recommendation)

def display_entity_manager_advanced():
    """Interface avanc√©e de gestion des entit√©s"""
    if not st.session_state.entities:
        st.info("Aucune entit√© √† g√©rer. Analysez d'abord un document.")
        return
    
    st.header("üîß Gestion Avanc√©e des Entit√©s")
    
    # Onglets am√©lior√©s
    tab1, tab2, tab3, tab4 = st.tabs(["üìù Entit√©s", "üë• Groupes", "üîç Recherche", "üìä Analyse"])
    
    with tab1:
        display_entities_tab_advanced()
    
    with tab2:
        display_groups_tab_advanced()
    
    with tab3:
        display_search_tab_advanced()
    
    with tab4:
        display_analysis_tab()

def display_entities_tab_advanced():
    """Onglet entit√©s avec fonctionnalit√©s avanc√©es"""
    st.subheader("üìù Gestion des Entit√©s")
    
    # Contr√¥les de filtrage avanc√©s
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # Filtre par type
        entity_types = list(set([e["type"] for e in st.session_state.entities]))
        selected_types = st.multiselect(
            "Filtrer par type:",
            entity_types,
            default=entity_types,
            key="entity_type_filter"
        )
    
    with col2:
        # Filtre par confiance
        if st.session_state.processing_mode == "ai":
            min_confidence = st.slider(
                "Confiance minimale:",
                0.0, 1.0, 0.0, 0.1,
                key="confidence_filter"
            )
        else:
            min_confidence = 0.0
    
    with col3:
        # Tri
        sort_options = {
            "position": "Position dans le texte",
            "type": "Type d'entit√©", 
            "confidence": "Confiance",
            "value": "Valeur alphab√©tique"
        }
        sort_by = st.selectbox(
            "Trier par:",
            options=list(sort_options.keys()),
            format_func=lambda x: sort_options[x],
            key="sort_entities"
        )
    
    with col4:
        # Actions en lot
        col4a, col4b = st.columns(2)
        with col4a:
            if st.button("üóëÔ∏è Supprimer s√©lectionn√©s", key="delete_selected"):
                st.session_state.show_delete_confirmation = True
        with col4b:
            if st.button("üìÅ Grouper s√©lectionn√©s", key="group_selected"):
                st.session_state.show_group_dialog = True
    
    # Filtrer et trier les entit√©s
    filtered_entities = []
    for entity in st.session_state.entities:
        if (entity["type"] in selected_types and 
            entity.get("confidence", 1.0) >= min_confidence):
            filtered_entities.append(entity)
    
    # Tri
    if sort_by == "position":
        filtered_entities.sort(key=lambda x: x.get("start", 0))
    elif sort_by == "type":
        filtered_entities.sort(key=lambda x: x["type"])
    elif sort_by == "confidence":
        filtered_entities.sort(key=lambda x: x.get("confidence", 1.0), reverse=True)
    elif sort_by == "value":
        filtered_entities.sort(key=lambda x: x["value"].lower())
    
    # Affichage des entit√©s avec s√©lection
    if filtered_entities:
        st.write(f"**{len(filtered_entities)} entit√©s trouv√©es**")
        
        # S√©lection globale
        select_all = st.checkbox("S√©lectionner tout", key="select_all_entities")
        
        selected_entities = []
        
        for i, entity in enumerate(filtered_entities):
            # Container pour chaque entit√©
            with st.container():
                entity_col1, entity_col2 = st.columns([1, 4])
                
                with entity_col1:
                    # Checkbox de s√©lection
                    is_selected = st.checkbox(
                        "S√©lectionner l'entit√©",
                        value=select_all,
                        key=f"select_entity_{i}_{entity['id']}",
                        label_visibility="collapsed",
                    )
                    if is_selected:
                        selected_entities.append(entity)
                
                with entity_col2:
                    # Informations de l'entit√©
                    with st.expander(
                        f"{entity['type']}: {entity['value'][:50]}{'...' if len(entity['value']) > 50 else ''}",
                        expanded=False
                    ):
                        # D√©tails de l'entit√©
                        detail_col1, detail_col2 = st.columns([2, 1])
                        
                        with detail_col1:
                            st.write(f"**Valeur:** `{entity['value']}`")
                            st.write(f"**Type:** {entity['type']}")
                            st.write(f"**Position:** {entity['start']}-{entity['end']}")
                            
                            if "confidence" in entity and entity["confidence"] is not None:
                                conf_percent = entity["confidence"] * 100
                                st.write(f"**Confiance:** {conf_percent:.1f}%")
                                
                                # Barre de confiance visuelle
                                st.markdown(f"""
                                <div style="background: #e9ecef; border-radius: 10px; height: 20px; margin: 10px 0;">
                                    <div style="background: linear-gradient(90deg, #dc3545 0%, #ffc107 50%, #28a745 100%); 
                                                width: {conf_percent}%; height: 100%; border-radius: 10px;">
                                    </div>
                                </div>
                                """, unsafe_allow_html=True)
                            
                            # Contexte si disponible
                            if "context" in entity and entity["context"]:
                                with st.expander("üìÑ Contexte"):
                                    st.markdown(entity["context"])
                            
                            # Modification du remplacement
                            new_replacement = st.text_input(
                                "Remplacement personnalis√©:",
                                value=entity.get('replacement', f"[{entity['type']}]"),
                                key=f"replacement_{i}_{entity['id']}"
                            )
                            
                            if new_replacement != entity.get('replacement'):
                                entity['replacement'] = new_replacement
                                st.session_state.entity_manager.update_entity(
                                    entity['id'], 
                                    {"replacement": new_replacement}
                                )
                        
                        with detail_col2:
                            # Actions individuelles
                            if st.button("üóëÔ∏è Supprimer", key=f"delete_{i}_{entity['id']}"):
                                st.session_state.entities.remove(entity)
                                st.session_state.entity_manager.delete_entity(entity['id'])
                                st.rerun()
                            
                            if st.button("üìã Copier valeur", key=f"copy_{i}_{entity['id']}"):
                                st.session_state.clipboard = entity['value']
                                st.success("Copi√©!")
                            
                            # Badge de type color√©
                            color = ENTITY_COLORS.get(entity['type'], "#6c757d")
                            st.markdown(f"""
                            <span class="entity-badge" style="background-color: {color};">
                                {entity['type']}
                            </span>
                            """, unsafe_allow_html=True)
        
        # Stocker les entit√©s s√©lectionn√©es
        st.session_state.selected_entities = selected_entities
        
    else:
        st.info("Aucune entit√© ne correspond aux crit√®res de filtrage.")

def display_groups_tab_advanced():
    """Onglet groupes avec fonctionnalit√©s avanc√©es"""
    st.subheader("üë• Gestion des Groupes")
    
    # Cr√©ation de groupe am√©lior√©e
    with st.expander("‚ûï Cr√©er un nouveau groupe", expanded=False):
        group_col1, group_col2 = st.columns(2)
        
        with group_col1:
            group_name = st.text_input("Nom du groupe:", key="new_group_name")
            group_description = st.text_area("Description:", key="new_group_description")
        
        with group_col2:
            # S√©lection d'entit√©s pour le groupe
            available_entities = [
                f"{e['type']}: {e['value'][:30]}{'...' if len(e['value']) > 30 else ''}"
                for e in st.session_state.entities
            ]
            
            selected_for_group = st.multiselect(
                "Entit√©s √† inclure:",
                available_entities,
                key="entities_for_new_group"
            )
            
            # Templates de groupes
            st.write("**Templates rapides:**")
            if st.button("üìß Groupe Emails"):
                group_name = "Adresses Email"
                group_description = "Toutes les adresses email d√©tect√©es"
                selected_for_group = [e for e in available_entities if "EMAIL:" in e]
            
            if st.button("üë§ Groupe Personnes"):
                group_name = "Personnes"
                group_description = "Noms et identit√©s de personnes"
                selected_for_group = [e for e in available_entities if "PERSON:" in e]
        
        if st.button("‚ú® Cr√©er le groupe", type="primary"):
            if group_name and selected_for_group:
                # Obtenir les IDs des entit√©s s√©lectionn√©es
                entity_ids = []
                for i, entity_display in enumerate(available_entities):
                    if entity_display in selected_for_group:
                        entity_ids.append(st.session_state.entities[i]['id'])
                
                group_id = st.session_state.entity_manager.create_group(
                    group_name, group_description, entity_ids
                )
                
                st.success(f"‚úÖ Groupe '{group_name}' cr√©√© avec {len(entity_ids)} entit√©s!")
                st.rerun()
            else:
                st.warning("Veuillez renseigner un nom et s√©lectionner des entit√©s.")
    
    # Affichage des groupes existants
    groups = st.session_state.entity_manager.groups
    
    if groups:
        st.subheader(f"üìÅ Groupes Existants ({len(groups)})")
        
        for group in groups:
            with st.expander(f"üë• {group['name']} ({len(group.get('entity_ids', []))} entit√©s)"):
                group_col1, group_col2 = st.columns([2, 1])
                
                with group_col1:
                    st.write(f"**Description:** {group.get('description', 'Aucune description')}")
                    st.write(f"**Cr√©√© le:** {group.get('created_at', 'Date inconnue')}")
                    
                    # Entit√©s du groupe
                    group_entities = st.session_state.entity_manager.get_entities_in_group(group['id'])
                    if group_entities:
                        st.write("**Entit√©s dans ce groupe:**")
                        for entity in group_entities:
                            color = ENTITY_COLORS.get(entity['type'], "#6c757d")
                            st.markdown(f"""
                            <div style="margin: 5px 0; padding: 5px; border-left: 3px solid {color}; background: #f8f9fa;">
                                <strong>{entity['type']}</strong>: {entity['value'][:50]}{'...' if len(entity['value']) > 50 else ''}
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.info("Aucune entit√© dans ce groupe")
                
                with group_col2:
                    # Actions sur le groupe
                    if st.button(f"‚úèÔ∏è Modifier", key=f"edit_group_{group['id']}"):
                        st.session_state.editing_group = group['id']
                    
                    if st.button(f"üóëÔ∏è Supprimer", key=f"delete_group_{group['id']}"):
                        st.session_state.entity_manager.delete_group(group['id'])
                        st.success(f"Groupe '{group['name']}' supprim√©!")
                        st.rerun()
                    
                    # Statistiques du groupe
                    if group_entities:
                        entity_types = {}
                        for entity in group_entities:
                            entity_type = entity['type']
                            entity_types[entity_type] = entity_types.get(entity_type, 0) + 1
                        
                        st.write("**Types:**")
                        for entity_type, count in entity_types.items():
                            st.write(f"‚Ä¢ {entity_type}: {count}")
    else:
        st.info("Aucun groupe cr√©√©. Utilisez le formulaire ci-dessus pour en cr√©er un.")

def display_search_tab_advanced():
    """Onglet recherche avanc√©e"""
    st.subheader("üîç Recherche Avanc√©e")
    
    search_col1, search_col2 = st.columns([2, 1])
    
    with search_col1:
        # Recherche textuelle
        search_query = st.text_input(
            "Rechercher dans le document:",
            placeholder="Tapez votre recherche...",
            key="search_query"
        )
        
        # Options de recherche
        search_options_col1, search_options_col2 = st.columns(2)
        
        with search_options_col1:
            case_sensitive = st.checkbox("Sensible √† la casse", key="case_sensitive")
            whole_words = st.checkbox("Mots entiers uniquement", key="whole_words")
        
        with search_options_col2:
            use_regex = st.checkbox("Recherche par expression r√©guli√®re", key="use_regex_search")
            search_in_entities = st.checkbox("Rechercher dans les entit√©s", value=True, key="search_entities")
    
    with search_col2:
        # Recherche rapide pr√©d√©finie
        st.write("**Recherches rapides:**")
        
        quick_searches = {
            "üìß Emails": r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
            "üìû T√©l√©phones": r'(?:\+33|0)[1-9](?:[0-9\s.-]{8,})',
            "üè† Adresses": r'\b\d+\s+[A-Za-z\s]+(?:rue|avenue|boulevard)',
            "üí≥ IBAN": r'\b[A-Z]{2}\d{2}[A-Z0-9]+\b',
            "üë§ Noms": r'\b[A-Z][a-z]+\s+[A-Z][a-z]+\b'
        }
        
        for label, pattern in quick_searches.items():
            if st.button(label, key=f"quick_search_{label}"):
                st.session_state.search_query = pattern
                st.session_state.use_regex_search = True
                st.rerun()
    
    # Effectuer la recherche
    if search_query and st.session_state.document_text:
        results = perform_advanced_search(
            st.session_state.document_text,
            search_query,
            case_sensitive,
            whole_words,
            use_regex,
            search_in_entities
        )
        
        if results:
            st.success(f"‚úÖ {len(results)} occurrence(s) trouv√©e(s)")
            
            # Affichage des r√©sultats
            for i, result in enumerate(results[:10]):  # Limiter √† 10 r√©sultats
                with st.expander(f"R√©sultat {i+1}: Ligne {result['line']}", expanded=i<3):
                    # Texte avec surlignage
                    highlighted_text = result['text'].replace(
                        result['match'],
                        f'<span class="highlight-text">{result["match"]}</span>'
                    )
                    
                    st.markdown(f"**Contexte:** {highlighted_text}", unsafe_allow_html=True)
                    st.write(f"**Position:** {result['start']}-{result['end']}")
                    
                    # Option pour cr√©er une entit√© depuis la recherche
                    if st.button(f"‚ûï Cr√©er entit√©", key=f"create_entity_{i}"):
                        new_entity = {
                            "id": str(uuid.uuid4()),
                            "type": "SEARCH_RESULT",
                            "value": result['match'],
                            "start": result['start'],
                            "end": result['end'],
                            "confidence": 1.0,
                            "replacement": f"[TROUV√â]"
                        }
                        st.session_state.entities.append(new_entity)
                        st.session_state.entity_manager.add_entity(new_entity)
                        st.success("Entit√© cr√©√©e depuis la recherche!")
                        st.rerun()
            
            if len(results) > 10:
                st.info(f"Seuls les 10 premiers r√©sultats sont affich√©s. Total: {len(results)}")
        else:
            st.warning("Aucun r√©sultat trouv√©.")

def perform_advanced_search(text, query, case_sensitive, whole_words, use_regex, search_entities):
    """Effectuer une recherche avanc√©e dans le texte"""
    import re
    
    results = []
    
    try:
        # Pr√©parer la requ√™te
        if use_regex:
            pattern = query
        else:
            # √âchapper les caract√®res sp√©ciaux regex
            pattern = re.escape(query)
            
            if whole_words:
                pattern = r'\b' + pattern + r'\b'
        
        # Flags de recherche
        flags = 0 if case_sensitive else re.IGNORECASE
        
        # Recherche dans le texte
        lines = text.split('\n')
        char_offset = 0
        
        for line_num, line in enumerate(lines, 1):
            try:
                for match in re.finditer(pattern, line, flags):
                    results.append({
                        'line': line_num,
                        'text': line,
                        'match': match.group(),
                        'start': char_offset + match.start(),
                        'end': char_offset + match.end()
                    })
            except re.error:
                # Pattern regex invalide
                break
            
            char_offset += len(line) + 1  # +1 pour le \n
        
        # Recherche dans les entit√©s si activ√©e
        if search_entities and st.session_state.entities:
            for entity in st.session_state.entities:
                entity_text = f"{entity['type']}: {entity['value']}"
                if (case_sensitive and query in entity_text) or \
                   (not case_sensitive and query.lower() in entity_text.lower()):
                    results.append({
                        'line': 'Entit√©',
                        'text': entity_text,
                        'match': query,
                        'start': entity.get('start', 0),
                        'end': entity.get('end', 0),
                        'entity_id': entity['id']
                    })
    
    except ValueError as e:
        # Handle invalid search parameters
        st.error(f"Erreur lors de la recherche: {e}")
    
    return results

def display_analysis_tab():
    """Onglet d'analyse statistique avanc√©e"""
    st.subheader("üìä Analyse Statistique Avanc√©e")
    
    if not st.session_state.entities:
        st.info("Aucune donn√©e √† analyser.")
        return
    
    # Statistiques globales
    stats = st.session_state.entity_manager.get_statistics()
    
    # M√©triques avanc√©es
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Entit√©s Totales", stats['total_entities'])
        st.metric("Types Uniques", len(stats['entity_types']))
        if stats['most_common_type']:
            st.metric("Type Dominant", stats['most_common_type'])
    
    with col2:
        if stats['confidence_stats']:
            st.metric("Confiance Moyenne", f"{stats['confidence_stats'].get('average', 0):.0%}")
            st.metric("Confiance Minimale", f"{stats['confidence_stats']['min']:.0%}")
            st.metric("Confiance Maximale", f"{stats['confidence_stats']['max']:.0%}")
    
    with col3:
        doc_length = len(st.session_state.document_text)
        entity_density = (stats['total_entities'] / doc_length * 1000) if doc_length > 0 else 0
        st.metric("Densit√©", f"{entity_density:.1f}/1k chars")

        coverage_percent = calculate_text_coverage(st.session_state.entities, doc_length)
        st.metric("Couverture", f"{coverage_percent:.1f}%")
    
    # Analyse de distribution
    st.subheader("üìà Distribution et Tendances")
    
    # Graphique de distribution des types
    if stats['entity_types']:
        import plotly.graph_objects as go
        
        # Graphique radar des types d'entit√©s
        categories = list(stats['entity_types'].keys())
        values = list(stats['entity_types'].values())
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=values,
            theta=categories,
            fill='toself',
            name='Distribution des Entit√©s',
            line_color='rgb(102, 126, 234)'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, max(values)]
                )),
            title="Distribution Radiale des Types d'Entit√©s",
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Analyse de confiance (si mode IA)
    if st.session_state.processing_mode == "ai" and stats['confidence_stats']:
        st.subheader("üéØ Analyse de Confiance D√©taill√©e")
        
        confidence_col1, confidence_col2 = st.columns(2)
        
        with confidence_col1:
            # Distribution de confiance
            confidence_values = [e.get('confidence', 1.0) for e in st.session_state.entities if 'confidence' in e]
            
            if confidence_values:
                import plotly.express as px
                
                fig_hist = px.histogram(
                    x=confidence_values,
                    nbins=20,
                    title="Distribution des Niveaux de Confiance",
                    labels={'x': 'Confiance', 'y': 'Nombre d\'entit√©s'}
                )
                fig_hist.update_layout(height=400)
                st.plotly_chart(fig_hist, use_container_width=True)
        
        with confidence_col2:
            # Confiance par type
            confidence_by_type = {}
            for entity in st.session_state.entities:
                if 'confidence' in entity:
                    entity_type = entity['type']
                    if entity_type not in confidence_by_type:
                        confidence_by_type[entity_type] = []
                    confidence_by_type[entity_type].append(entity['confidence'])
            
            if confidence_by_type:
                avg_confidence_by_type = {
                    entity_type: sum(confidences) / len(confidences)
                    for entity_type, confidences in confidence_by_type.items()
                }
                
                fig_bar = px.bar(
                    x=list(avg_confidence_by_type.keys()),
                    y=list(avg_confidence_by_type.values()),
                    title="Confiance Moyenne par Type",
                    labels={'x': 'Type d\'entit√©', 'y': 'Confiance moyenne'}
                )
                fig_bar.update_layout(height=400)
                st.plotly_chart(fig_bar, use_container_width=True)
    
    # D√©tection de conflits et anomalies
    st.subheader("‚ö†Ô∏è D√©tection d'Anomalies")
    
    conflicts = st.session_state.entity_manager.get_entity_conflicts()
    if conflicts:
        st.warning(f"üîç {len(conflicts)} conflit(s) d√©tect√©(s) entre entit√©s")
        
        with st.expander("Voir les conflits"):
            for i, conflict in enumerate(conflicts):
                st.write(f"**Conflit {i+1}:**")
                st.write(f"‚Ä¢ Entit√© 1: {conflict['entity1']['type']} - '{conflict['entity1']['value']}'")
                st.write(f"‚Ä¢ Entit√© 2: {conflict['entity2']['type']} - '{conflict['entity2']['value']}'")
                st.write(f"‚Ä¢ Chevauchement: {conflict['overlap_length']} caract√®res")
                
                if st.button(f"üîß R√©soudre automatiquement", key=f"resolve_conflict_{i}"):
                    resolved = st.session_state.entity_manager.resolve_entity_conflicts("keep_highest_confidence")
                    st.success(f"‚úÖ {resolved} conflit(s) r√©solu(s)")
                    st.rerun()
    else:
        st.success("‚úÖ Aucun conflit d√©tect√© entre les entit√©s")
    
    # Validation de l'int√©grit√©
    integrity_issues = st.session_state.entity_manager.validate_data_integrity()
    if integrity_issues:
        st.error(f"‚ùå {len(integrity_issues)} probl√®me(s) d'int√©grit√© d√©tect√©(s)")
        with st.expander("Voir les probl√®mes"):
            for issue in integrity_issues:
                st.write(f"‚Ä¢ {issue}")
    else:
        st.success("‚úÖ Int√©grit√© des donn√©es v√©rifi√©e")

def display_export_section_advanced():
    """Section d'export avanc√©e"""
    if not st.session_state.entities:
        st.info("Aucun document √† exporter. Analysez d'abord un document.")
        return
    
    st.header("üì§ Export du Document Anonymis√©")
    
    # Options d'export
    export_col1, export_col2 = st.columns([2, 1])
    
    with export_col1:
        st.subheader("‚öôÔ∏è Options d'Export")
        
        # Filigrane
        add_watermark = st.checkbox(
            "Ajouter un filigrane",
            value=st.session_state.export_options["add_watermark"],
            key="export_watermark"
        )

        st.session_state.export_options["add_watermark"] = add_watermark
        
        if add_watermark:
            watermark_text = st.text_input(
                "Texte du filigrane:",
                value=st.session_state.export_options["watermark_text"],
                key="watermark_text"
            )
            st.session_state.export_options["watermark_text"] = watermark_text
        
        # Rapport d'audit
        generate_report = st.checkbox(
            "G√©n√©rer un rapport d'audit complet",
            value=st.session_state.export_options["generate_report"],
            key="export_report"
        )

        st.session_state.export_options["generate_report"] = generate_report
        
        # Statistiques
        include_stats = st.checkbox(
            "Inclure les statistiques d√©taill√©es",
            value=st.session_state.export_options["include_statistics"],
            key="export_stats"
        )

        st.session_state.export_options["include_statistics"] = include_stats
        
        # Format d'export
        export_format = st.selectbox(
            "Format d'export:",
            ["docx", "pdf", "txt"],
            format_func=lambda x: {
                "docx": "üìÑ Word Document (DOCX)",
                "pdf": "üìã PDF Document",
                "txt": "üìù Texte Simple (TXT)"
            }[x]
        )
        
        # V√©rifier la pr√©sence du fichier original avant export
        original_path = st.session_state.get("original_file_path")
        has_original = isinstance(original_path, str) and original_path.strip()

        if not has_original:
            st.warning("Aucun document original trouv√©. Veuillez t√©l√©verser ou r√©analyser un document avant l'export.")

        export_clicked = st.button(
            "üì• Exporter le document",
            type="primary",
            disabled=not has_original
        )

        if export_clicked and has_original:
            try:
                # Pr√©parer les options d'export
                export_options = {
                    "format": export_format,
                    "watermark": watermark_text if add_watermark else None,
                }
                audit_flag = generate_report or include_stats

                # Exporter en utilisant le fichier original
                anonymizer = get_anonymizer()
                result = anonymizer.export_anonymized_document(
                    original_path,
                    st.session_state.entities,
                    export_options,
                    audit=audit_flag,
                )

                # T√©l√©chargement
                if result and os.path.exists(result):
                    with open(result, "rb") as f:
                        file_content = f.read()

                    file_name = f"anonymized_{Path(original_path).stem}.{export_format}"
                    st.download_button(
                        "‚¨áÔ∏è T√©l√©charger le document anonymis√©",
                        file_content,
                        file_name=file_name,
                        mime=f"application/{export_format}"
                    )
                else:
                    st.error("‚ùå Erreur lors de l'export du document")

            except (OSError, RuntimeError, ValueError) as e:
                # Export may fail due to filesystem or document issues
                st.error(f"‚ùå Erreur: {str(e)}")
            finally:
                # Nettoyer le fichier original apr√®s l'export
                if original_path and os.path.exists(original_path):
                    try:
                        os.unlink(original_path)
                    except OSError:
                        pass
                st.session_state["original_file_path"] = None
    
    with export_col2:
        st.subheader("üìä R√©sum√© de l'Export")
        
        # Informations sur le document
        st.info(f"""
        **Document source:** {Path(st.session_state.processed_file_path).name}
        
        **Format de sortie:** {export_format.upper()}
        
        **Entit√©s √† anonymiser:** {len(st.session_state.entities)}
        
        **Options activ√©es:**
        {"‚Ä¢ Filigrane" if add_watermark else ""}
        {"‚Ä¢ Rapport d'audit" if generate_report else ""}
        {"‚Ä¢ Statistiques" if include_stats else ""}
        """)
        
        # Aper√ßu rapide
        with st.expander("üëÅÔ∏è Aper√ßu"):
            st.write("Exemple de texte anonymis√©:")
            sample_text = st.session_state.document_text[:500]
            for entity in st.session_state.entities:
                if entity['start'] < 500:
                    replacement = entity.get('replacement', f"[{entity['type']}]")
                    sample_text = (
                        sample_text[:entity['start']] +
                        f"**{replacement}**" +
                        sample_text[entity['end']:]
                    )
            st.markdown(f"{sample_text}...")

# === PROGRAMME PRINCIPAL ===
def main():
    """Programme principal"""
    try:
        # Initialisation
        init_session_state()
        
        # En-t√™te
        display_header()
        display_system_status()
        
        # Upload de fichier
        uploaded_file = display_upload_section()
        
        if uploaded_file:
            # Options de traitement
            display_processing_options()
            
            # Bouton de traitement
            if st.button("üîç Analyser le Document", type="primary"):
                success = process_document_with_progress(uploaded_file)
                
                if success:
                    st.balloons()
                    st.success("‚úÖ Document analys√© avec succ√®s!")
            
            # Afficher les r√©sultats si disponibles
            if st.session_state.entities:
                display_results_advanced()
                display_entity_manager_advanced()
                display_export_section_advanced()
        
        # Nettoyage p√©riodique
        cleanup_temp_files()
        
    except (OSError, ValueError, RuntimeError) as e:
        # Catch any remaining unexpected errors and display them
        st.error(f"‚ùå Erreur inattendue: {str(e)}")
        if st.session_state.get("debug_mode", False):
            st.exception(e)

if __name__ == "__main__":
    main()