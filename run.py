#!/usr/bin/env python3
"""
Script de lancement pour l'Anonymiseur de Documents Juridiques
Usage: python run.py [--dev] [--port PORT] [--host HOST]
"""

import os
import sys
import logging
import argparse
import subprocess
from pathlib import Path

def setup_logging():
    """Configuration du logging"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('anonymizer.log')
        ]
    )

def check_dependencies():
    """V√©rifier les d√©pendances critiques"""
    required_packages = [
        'streamlit',
        'python-docx',
        'pdfplumber', 
        'pdf2docx'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
        except ImportError:
            missing.append(package)
    
    if missing:
        print(f"‚ùå D√©pendances manquantes: {', '.join(missing)}")
        print("üì¶ Installez avec: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Toutes les d√©pendances critiques sont install√©es")
    return True

def check_optional_dependencies():
    """V√©rifier les d√©pendances optionnelles"""
    optional_packages = {
        'transformers': 'Mode IA (NER) d√©sactiv√©',
        'torch': 'Mode IA (NER) d√©sactiv√©', 
        'plotly': 'Graphiques avanc√©s d√©sactiv√©s',
        'pandas': 'Fonctionnalit√©s d\'analyse limit√©es'
    }
    
    for package, message in optional_packages.items():
        try:
            __import__(package)
            print(f"‚úÖ {package} disponible")
        except ImportError:
            print(f"‚ö†Ô∏è {package} manquant - {message}")

def create_directories():
    """Cr√©er les r√©pertoires n√©cessaires"""
    directories = [
        'temp',
        'logs', 
        'exports',
        'data'
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"üìÅ R√©pertoire cr√©√©/v√©rifi√©: {directory}")

def check_streamlit_config():
    """V√©rifier et cr√©er la configuration Streamlit"""
    config_dir = Path.home() / '.streamlit'
    config_file = config_dir / 'config.toml'
    
    config_dir.mkdir(exist_ok=True)
    
    if not config_file.exists():
        config_content = """
[server]
port = 8501
headless = true
enableCORS = false
enableXsrfProtection = false

[browser]
gatherUsageStats = false

[theme]
primaryColor = "#667eea"
backgroundColor = "#ffffff"
secondaryBackgroundColor = "#f0f2f6"
textColor = "#262730"

[logger]
level = "info"
"""
        config_file.write_text(config_content.strip())
        print("‚öôÔ∏è Configuration Streamlit cr√©√©e")
    else:
        print("‚öôÔ∏è Configuration Streamlit existante")

def run_streamlit(host='localhost', port=8501, dev_mode=False):
    """Lancer l'application Streamlit"""
    cmd = [
        sys.executable, '-m', 'streamlit', 'run', 'main.py',
        '--server.address', host,
        '--server.port', str(port),
        '--server.headless', 'true'
    ]
    
    if dev_mode:
        cmd.extend(['--server.runOnSave', 'true'])
        print("üîß Mode d√©veloppement activ√©")
    
    print(f"üöÄ Lancement de l'application sur http://{host}:{port}")
    print("‚èπÔ∏è Arr√™t: Ctrl+C")
    print("-" * 60)
    
    try:
        subprocess.run(cmd)
    except KeyboardInterrupt:
        print("\nüëã Application arr√™t√©e")
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {e}")

def display_info():
    """Afficher les informations de l'application"""
    print("=" * 60)
    print("üõ°Ô∏è ANONYMISEUR DE DOCUMENTS JURIDIQUES")
    print("=" * 60)
    print("üìã Fonctionnalit√©s:")
    print("   ‚Ä¢ Anonymisation PDF et DOCX")
    print("   ‚Ä¢ D√©tection Regex et IA (NER)")
    print("   ‚Ä¢ Interface intuitive Streamlit")
    print("   ‚Ä¢ Gestion d'entit√©s et groupes")
    print("   ‚Ä¢ Export avec options avanc√©es")
    print("   ‚Ä¢ Conformit√© RGPD")
    print("=" * 60)

def display_usage_info(host, port):
    """Afficher les informations d'utilisation"""
    print("\nüìñ GUIDE D'UTILISATION:")
    print(f"1. Ouvrez votre navigateur sur http://{host}:{port}")
    print("2. Uploadez un document PDF ou DOCX")
    print("3. Choisissez le mode d'analyse (Regex ou IA)")
    print("4. Lancez l'analyse et attendez les r√©sultats")
    print("5. G√©rez les entit√©s d√©tect√©es si n√©cessaire")
    print("6. Exportez le document anonymis√©")
    print("\nüí° CONSEILS:")
    print("   ‚Ä¢ Mode Regex: Rapide, id√©al pour documents standardis√©s")
    print("   ‚Ä¢ Mode IA: Plus pr√©cis, pour documents complexes")
    print("   ‚Ä¢ V√©rifiez toujours les entit√©s avant l'export final")

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(
        description="Anonymiseur de Documents Juridiques - Streamlit"
    )
    parser.add_argument(
        '--host',
        default='localhost',
        help='Adresse d\'√©coute (d√©faut: localhost)'
    )
    parser.add_argument(
        '--port',
        type=int,
        default=8501,
        help='Port du serveur (d√©faut: 8501)'
    )
    parser.add_argument(
        '--dev',
        action='store_true',
        help='Mode d√©veloppement avec auto-reload'
    )
    parser.add_argument(
        '--check-only',
        action='store_true',
        help='V√©rifier uniquement les d√©pendances'
    )
    parser.add_argument(
        '--no-browser',
        action='store_true',
        help='Ne pas ouvrir le navigateur automatiquement'
    )
    
    args = parser.parse_args()
    
    # Configuration du logging
    setup_logging()
    
    # Affichage des informations
    display_info()
    
    # V√©rifications pr√©liminaires
    print("\nüîç V√âRIFICATIONS SYST√àME:")
    
    if not check_dependencies():
        sys.exit(1)
    
    check_optional_dependencies()
    
    if args.check_only:
        print("\n‚úÖ V√©rifications termin√©es")
        sys.exit(0)
    
    # Pr√©paration de l'environnement
    print("\n‚öôÔ∏è PR√âPARATION:")
    create_directories()
    check_streamlit_config()
    
    # Informations d'utilisation
    display_usage_info(args.host, args.port)
    
    # Lancement de l'application
    print(f"\nüöÄ LANCEMENT:")
    
    # Ouvrir le navigateur si demand√©
    if not args.no_browser and args.host in ['localhost', '127.0.0.1']:
        import webbrowser
        import threading
        import time
        
        def open_browser():
            time.sleep(2)  # Attendre que le serveur soit pr√™t
            webbrowser.open(f'http://{args.host}:{args.port}')
        
        threading.Thread(target=open_browser, daemon=True).start()
    
    # D√©marrage de Streamlit
    run_streamlit(args.host, args.port, args.dev)

if __name__ == "__main__":
    main()