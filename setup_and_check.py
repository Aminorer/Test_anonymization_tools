#!/usr/bin/env python3
"""
Script d'installation et de v√©rification compl√®te
Anonymiseur de Documents Juridiques v2.0 avec NER
"""

import os
import sys
import subprocess
import importlib
import platform
import time
from pathlib import Path

class Colors:
    """Couleurs pour l'affichage console"""
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_colored(text, color=Colors.WHITE):
    """Afficher du texte color√©"""
    print(f"{color}{text}{Colors.END}")

def print_header(title):
    """Afficher un en-t√™te stylis√©"""
    border = "=" * len(title)
    print_colored(f"\n{border}", Colors.CYAN)
    print_colored(title, Colors.CYAN + Colors.BOLD)
    print_colored(border, Colors.CYAN)

def print_step(step_num, description):
    """Afficher une √©tape"""
    print_colored(f"\n[{step_num}] {description}", Colors.BLUE + Colors.BOLD)

def check_python_version():
    """V√©rifier la version Python"""
    print_step("1", "V√©rification de la version Python")
    
    version = sys.version_info
    python_version = f"{version.major}.{version.minor}.{version.micro}"
    
    print(f"Version Python d√©tect√©e: {python_version}")
    
    if version.major == 3 and 8 <= version.minor <= 11:
        print_colored("‚úÖ Version Python compatible", Colors.GREEN)
        return True
    else:
        print_colored("‚ùå Version Python non support√©e", Colors.RED)
        print_colored("Versions support√©es: Python 3.8, 3.9, 3.10, 3.11", Colors.YELLOW)
        return False

def check_system_info():
    """Afficher les informations syst√®me"""
    print_step("2", "Informations syst√®me")
    
    print(f"Syst√®me d'exploitation: {platform.system()} {platform.release()}")
    print(f"Architecture: {platform.machine()}")
    print(f"Processeur: {platform.processor()}")
    
    # M√©moire RAM
    try:
        import psutil
        memory = psutil.virtual_memory()
        memory_gb = memory.total / (1024**3)
        print(f"M√©moire RAM: {memory_gb:.1f} GB")
        
        if memory_gb >= 8:
            print_colored("‚úÖ RAM suffisante pour toutes les fonctionnalit√©s", Colors.GREEN)
        elif memory_gb >= 4:
            print_colored("‚ö†Ô∏è RAM limit√©e - consid√©rez les mod√®les l√©gers", Colors.YELLOW)
        else:
            print_colored("‚ùå RAM insuffisante - fonctionnalit√©s limit√©es", Colors.RED)
    except ImportError:
        print("Impossible de d√©terminer la RAM disponible")

def create_virtual_environment():
    """Cr√©er un environnement virtuel"""
    print_step("3", "Cr√©ation de l'environnement virtuel")
    
    venv_path = Path("venv_anonymizer")
    
    if venv_path.exists():
        print_colored("üìÅ Environnement virtuel existant d√©tect√©", Colors.YELLOW)
        response = input("Voulez-vous le recr√©er? (y/N): ").lower()
        
        if response == 'y':
            print("Suppression de l'ancien environnement...")
            import shutil
            shutil.rmtree(venv_path)
        else:
            print_colored("‚úÖ Utilisation de l'environnement existant", Colors.GREEN)
            return True
    
    try:
        print("Cr√©ation de l'environnement virtuel...")
        subprocess.run([sys.executable, "-m", "venv", str(venv_path)], check=True)
        print_colored("‚úÖ Environnement virtuel cr√©√©", Colors.GREEN)
        
        # Instructions d'activation
        if platform.system() == "Windows":
            activate_cmd = f"{venv_path}\\Scripts\\activate"
        else:
            activate_cmd = f"source {venv_path}/bin/activate"
        
        print_colored(f"üí° Pour activer: {activate_cmd}", Colors.CYAN)
        return True
        
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå Erreur cr√©ation environnement: {e}", Colors.RED)
        return False

def get_pip_executable():
    """Obtenir l'ex√©cutable pip appropri√©"""
    venv_path = Path("venv_anonymizer")
    
    if platform.system() == "Windows":
        pip_exe = venv_path / "Scripts" / "pip.exe"
    else:
        pip_exe = venv_path / "bin" / "pip"
    
    if pip_exe.exists():
        return str(pip_exe)
    else:
        return "pip"  # Fallback

def install_dependencies():
    """Installer les d√©pendances"""
    print_step("4", "Installation des d√©pendances")
    
    pip_exe = get_pip_executable()
    
    # Mise √† jour de pip
    print("Mise √† jour de pip...")
    try:
        subprocess.run([pip_exe, "install", "--upgrade", "pip"], check=True, capture_output=True)
        print_colored("‚úÖ Pip mis √† jour", Colors.GREEN)
    except subprocess.CalledProcessError:
        print_colored("‚ö†Ô∏è Impossible de mettre √† jour pip", Colors.YELLOW)
    
    # Installation des d√©pendances principales
    requirements_file = Path("requirements.txt")
    
    if not requirements_file.exists():
        print_colored("‚ùå Fichier requirements.txt non trouv√©", Colors.RED)
        return False
    
    print("Installation des d√©pendances principales...")
    try:
        # Installation par √©tapes pour √©viter les conflits
        essential_packages = [
            "streamlit>=1.28.0",
            "python-docx>=0.8.11",
            "pdfplumber>=0.7.6",
            "pandas>=1.5.0",
            "plotly>=5.15.0"
        ]
        
        for package in essential_packages:
            print(f"Installation de {package}...")
            subprocess.run([pip_exe, "install", package], check=True, capture_output=True)
        
        print_colored("‚úÖ Packages essentiels install√©s", Colors.GREEN)
        
        # Installation PyTorch (critique pour √©viter conflits)
        print("Installation de PyTorch...")
        subprocess.run([
            pip_exe, "install", 
            "torch>=1.12.0,<2.1.0",
            "torchvision>=0.13.0,<0.16.0", 
            "torchaudio>=0.12.0,<0.15.0",
            "--index-url", "https://download.pytorch.org/whl/cpu"
        ], check=True, capture_output=True)
        
        print_colored("‚úÖ PyTorch install√©", Colors.GREEN)
        
        # Installation Transformers
        print("Installation de Transformers...")
        subprocess.run([
            pip_exe, "install",
            "transformers>=4.21.0,<5.0.0",
            "tokenizers>=0.13.0,<1.0.0"
        ], check=True, capture_output=True)
        
        print_colored("‚úÖ Transformers install√©", Colors.GREEN)
        
        # Installation du reste
        print("Installation des d√©pendances restantes...")
        subprocess.run([pip_exe, "install", "-r", str(requirements_file)], check=True, capture_output=True)
        
        print_colored("‚úÖ Toutes les d√©pendances install√©es", Colors.GREEN)
        return True
        
    except subprocess.CalledProcessError as e:
        print_colored(f"‚ùå Erreur installation: {e}", Colors.RED)
        return False

def install_spacy_models():
    """Installer les mod√®les SpaCy fran√ßais"""
    print_step("5", "Installation des mod√®les SpaCy fran√ßais")
    
    pip_exe = get_pip_executable()
    
    models = [
        ("fr_core_news_sm", "Mod√®le fran√ßais compact (~50MB)"),
        ("fr_core_news_lg", "Mod√®le fran√ßais large (~500MB)")
    ]
    
    for model_name, description in models:
        print(f"Installation de {model_name} - {description}")
        
        try:
            # V√©rifier si d√©j√† install√©
            result = subprocess.run([
                get_python_executable(), "-c", 
                f"import spacy; spacy.load('{model_name}'); print('OK')"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print_colored(f"‚úÖ {model_name} d√©j√† install√©", Colors.GREEN)
                continue
            
            # Installation
            subprocess.run([
                get_python_executable(), "-m", "spacy", "download", model_name
            ], check=True, capture_output=True)
            
            print_colored(f"‚úÖ {model_name} install√©", Colors.GREEN)
            
        except subprocess.CalledProcessError:
            print_colored(f"‚ö†Ô∏è Impossible d'installer {model_name}", Colors.YELLOW)
            print("Vous pouvez l'installer manuellement plus tard.")

def get_python_executable():
    """Obtenir l'ex√©cutable Python appropri√©"""
    venv_path = Path("venv_anonymizer")
    
    if platform.system() == "Windows":
        python_exe = venv_path / "Scripts" / "python.exe"
    else:
        python_exe = venv_path / "bin" / "python"
    
    if python_exe.exists():
        return str(python_exe)
    else:
        return sys.executable

def test_dependencies():
    """Tester toutes les d√©pendances"""
    print_step("6", "Test des d√©pendances")
    
    dependencies = {
        # Obligatoires
        "streamlit": "Interface utilisateur",
        "docx": "Traitement documents Word",  # Note: module s'appelle 'docx' pas 'python-docx'
        "pdfplumber": "Extraction PDF",
        "pandas": "Traitement donn√©es",
        "plotly": "Graphiques",
        
        # IA
        "torch": "PyTorch (IA)",
        "transformers": "Mod√®les NER",
        "spacy": "NER fran√ßais",
        
        # Utilitaires
        "PIL": "Traitement images",  # Note: Pillow s'importe comme PIL
        "psutil": "Informations syst√®me",
        "requests": "Requ√™tes HTTP"
    }
    
    available = {}
    issues = []
    
    python_exe = get_python_executable()
    
    for module_name, description in dependencies.items():
        try:
            result = subprocess.run([
                python_exe, "-c", f"import {module_name}; print('OK')"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                available[module_name] = True
                print_colored(f"‚úÖ {module_name}: {description}", Colors.GREEN)
            else:
                available[module_name] = False
                print_colored(f"‚ùå {module_name}: {description}", Colors.RED)
                issues.append(module_name)
                
        except Exception as e:
            available[module_name] = False
            print_colored(f"‚ùå {module_name}: Erreur test - {e}", Colors.RED)
            issues.append(module_name)
    
    return available, issues

def test_spacy_models():
    """Tester les mod√®les SpaCy"""
    print_step("7", "Test des mod√®les SpaCy")
    
    python_exe = get_python_executable()
    
    models = [
        "fr_core_news_sm",
        "fr_core_news_lg"
    ]
    
    available_models = []
    
    for model in models:
        try:
            result = subprocess.run([
                python_exe, "-c",
                f"import spacy; nlp = spacy.load('{model}'); print('OK')"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print_colored(f"‚úÖ {model} fonctionnel", Colors.GREEN)
                available_models.append(model)
            else:
                print_colored(f"‚ùå {model} non disponible", Colors.RED)
                
        except Exception as e:
            print_colored(f"‚ùå {model} erreur: {e}", Colors.RED)
    
    return available_models

def test_pytorch_streamlit_compatibility():
    """Tester la compatibilit√© PyTorch/Streamlit"""
    print_step("8", "Test compatibilit√© PyTorch/Streamlit")
    
    python_exe = get_python_executable()
    
    test_script = '''
import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"
os.environ["OMP_NUM_THREADS"] = "1"

try:
    import torch
    torch.set_num_threads(1)
    print("PyTorch OK")
    
    import transformers
    print("Transformers OK")
    
    # Test basique
    from transformers import pipeline
    print("Pipeline OK")
    
    print("SUCCESS")
except Exception as e:
    print(f"ERROR: {e}")
'''
    
    try:
        result = subprocess.run([
            python_exe, "-c", test_script
        ], capture_output=True, text=True, timeout=30)
        
        if "SUCCESS" in result.stdout:
            print_colored("‚úÖ PyTorch/Streamlit compatible", Colors.GREEN)
            return True
        else:
            print_colored("‚ùå Probl√®me de compatibilit√© d√©tect√©", Colors.RED)
            print("Sortie:", result.stdout)
            print("Erreur:", result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print_colored("‚ö†Ô∏è Test de compatibilit√© timeout", Colors.YELLOW)
        return False
    except Exception as e:
        print_colored(f"‚ùå Erreur test compatibilit√©: {e}", Colors.RED)
        return False

def run_quick_functional_test():
    """Ex√©cuter un test fonctionnel rapide"""
    print_step("9", "Test fonctionnel rapide")
    
    python_exe = get_python_executable()
    
    test_script = '''
import sys
import os

# Configuration anti-conflit
os.environ["TOKENIZERS_PARALLELISM"] = "false"
os.environ["OMP_NUM_THREADS"] = "1"

try:
    # Test imports
    import streamlit as st
    print("‚úÖ Streamlit import√©")
    
    # Ajouter le chemin du projet
    sys.path.insert(0, ".")
    
    # Test anonymizer
    from src.anonymizer import DocumentAnonymizer, RegexAnonymizer
    print("‚úÖ Modules anonymizer import√©s")
    
    # Test regex
    regex_anonymizer = RegexAnonymizer()
    test_text = "Contact: jean.dupont@email.com, t√©l: 01 23 45 67 89"
    entities = regex_anonymizer.detect_entities(test_text)
    print(f"‚úÖ Regex: {len(entities)} entit√©s d√©tect√©es")
    
    # Test IA (si disponible)
    try:
        anonymizer = DocumentAnonymizer()
        if anonymizer.ai_anonymizer:
            ai_entities = anonymizer.ai_anonymizer.detect_entities_ai(test_text, 0.7)
            print(f"‚úÖ IA: {len(ai_entities)} entit√©s d√©tect√©es")
        else:
            print("‚ÑπÔ∏è IA non disponible (normal)")
    except Exception as e:
        print(f"‚ö†Ô∏è Test IA √©chou√©: {e}")
    
    print("SUCCESS: Tests fonctionnels r√©ussis")
    
except Exception as e:
    print(f"ERROR: {e}")
    import traceback
    traceback.print_exc()
'''
    
    try:
        result = subprocess.run([
            python_exe, "-c", test_script
        ], capture_output=True, text=True, timeout=60)
        
        if "SUCCESS" in result.stdout:
            print_colored("‚úÖ Tests fonctionnels r√©ussis", Colors.GREEN)
            print(result.stdout)
            return True
        else:
            print_colored("‚ùå Tests fonctionnels √©chou√©s", Colors.RED)
            print("Sortie:", result.stdout)
            print("Erreur:", result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print_colored("‚ö†Ô∏è Tests fonctionnels timeout", Colors.YELLOW)
        return False
    except Exception as e:
        print_colored(f"‚ùå Erreur tests fonctionnels: {e}", Colors.RED)
        return False

def generate_report(test_results):
    """G√©n√©rer un rapport de diagnostic"""
    print_step("10", "G√©n√©ration du rapport de diagnostic")
    
    report_path = Path("installation_report.md")
    
    with open(report_path, "w", encoding="utf-8") as f:
        f.write("# Rapport d'Installation - Anonymiseur de Documents\n\n")
        f.write(f"Date: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("## Informations Syst√®me\n")
        f.write(f"- Syst√®me: {platform.system()} {platform.release()}\n")
        f.write(f"- Python: {sys.version}\n")
        f.write(f"- Architecture: {platform.machine()}\n\n")
        
        f.write("## R√©sultats des Tests\n")
        for test_name, result in test_results.items():
            status = "‚úÖ R√âUSSI" if result else "‚ùå √âCHOU√â"
            f.write(f"- {test_name}: {status}\n")
        
        f.write("\n## Recommandations\n")
        
        if not test_results.get("dependencies", True):
            f.write("- R√©installez les d√©pendances manquantes\n")
        
        if not test_results.get("pytorch_compatibility", True):
            f.write("- V√©rifiez la compatibilit√© PyTorch/Streamlit\n")
            f.write("- Essayez de r√©installer torch en premier\n")
        
        if not test_results.get("spacy_models", True):
            f.write("- Installez les mod√®les SpaCy manuellement:\n")
            f.write("  ```bash\n")
            f.write("  python -m spacy download fr_core_news_sm\n")
            f.write("  python -m spacy download fr_core_news_lg\n")
            f.write("  ```\n")
        
        f.write("\n## Commandes Utiles\n")
        f.write("```bash\n")
        f.write("# Activer l'environnement virtuel\n")
        if platform.system() == "Windows":
            f.write("venv_anonymizer\\Scripts\\activate\n")
        else:
            f.write("source venv_anonymizer/bin/activate\n")
        f.write("\n# Lancer l'application\n")
        f.write("streamlit run main.py\n")
        f.write("```\n")
    
    print_colored(f"‚úÖ Rapport g√©n√©r√©: {report_path}", Colors.GREEN)

def main():
    """Fonction principale"""
    print_colored("üõ°Ô∏è ANONYMISEUR DE DOCUMENTS JURIDIQUES v2.0", Colors.MAGENTA + Colors.BOLD)
    print_colored("Installation et V√©rification Compl√®te avec NER", Colors.CYAN)
    
    test_results = {}
    
    # Tests √©tape par √©tape
    test_results["python_version"] = check_python_version()
    
    if not test_results["python_version"]:
        print_colored("\n‚ùå Version Python incompatible. Installation arr√™t√©e.", Colors.RED)
        return
    
    check_system_info()
    
    test_results["venv_creation"] = create_virtual_environment()
    test_results["dependencies"] = install_dependencies()
    
    if test_results["dependencies"]:
        install_spacy_models()
        
        available_deps, issues = test_dependencies()
        test_results["dependencies"] = len(issues) == 0
        
        spacy_models = test_spacy_models()
        test_results["spacy_models"] = len(spacy_models) > 0
        
        test_results["pytorch_compatibility"] = test_pytorch_streamlit_compatibility()
        test_results["functional_tests"] = run_quick_functional_test()
    
    # R√©sum√© final
    print_header("R√âSUM√â DE L'INSTALLATION")
    
    total_tests = len(test_results)
    passed_tests = sum(test_results.values())
    
    print(f"Tests r√©ussis: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print_colored("üéâ INSTALLATION COMPL√àTE R√âUSSIE!", Colors.GREEN + Colors.BOLD)
        print_colored("Vous pouvez maintenant lancer l'application avec:", Colors.CYAN)
        print_colored("streamlit run main.py", Colors.WHITE + Colors.BOLD)
    elif passed_tests >= total_tests * 0.8:
        print_colored("‚ö†Ô∏è Installation majoritairement r√©ussie", Colors.YELLOW + Colors.BOLD)
        print_colored("Quelques fonctionnalit√©s peuvent √™tre limit√©es", Colors.YELLOW)
    else:
        print_colored("‚ùå Installation incompl√®te", Colors.RED + Colors.BOLD)
        print_colored("Consultez le rapport pour les solutions", Colors.RED)
    
    # G√©n√©rer le rapport
    generate_report(test_results)
    
    print_colored("\nüìã Rapport d√©taill√© sauvegard√© dans installation_report.md", Colors.CYAN)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print_colored("\n\n‚èπÔ∏è Installation interrompue par l'utilisateur", Colors.YELLOW)
        sys.exit(1)
    except Exception as e:
        print_colored(f"\n\n‚ùå Erreur inattendue: {e}", Colors.RED)
        import traceback
        traceback.print_exc()
        sys.exit(1)